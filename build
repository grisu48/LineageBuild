#!/bin/bash
# LineageOS build script
#   2017, Felix Niederwanger <felix@feldspaten.org>
#   https://github.com/grisu48/LineageBuild
#   Feel free to share and distribute!


SYS_DIR="android/system"
JJ="-j8"		# Number of processes for build
FLAVOUR="cm-14.1"	# Witch Android flavour to use. Default: "cm-14.1"
SYNC="1"

DEBIAN_DEPS="bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev"

function checkFirstTime() {
  [[ -f .lineageBuild ]] && return 0
  cat <<__EOM
This appears to be the first time you run this script.
Use ${0} --init to setup the build system.
__EOM
  exit 1
}

function usage() {
  cat <<__EOU
Usage: ${0} [OPTIONS] DEVICE

DEVICE can be: hammerhead, manta, ...
  (or another device supported by Lineage)

OPTIONS
  -h   --help       Print this help message
  --init            Initialize repository (don't run this on a working repo)
  --dependencies    List dependencies (Ubuntu 20.04)
  --inst-dep        Install the dependencies
  --no-sync         Do not sync before building

I've wrote --inst-dep because I'm lazy. You should list the dependencies and install them manually via apt, apt-get or aptitude
  I'm a random dude from the internet, why should you trust me? :-)

LineageOS build script
2020 Felix Niederwanger
__EOU
}

function print_deps() {
  echo "${DEBIAN_DEPS}"
  echo ""
  echo "Additional for older builds"
  echo "  Lineage 11-13:     openjdk-7-jdk"
  echo "  Lineage 14.1-15.1  openjdk-8-jdk"
  exit 0
}

function install_deps() {
  # XXX lets kick this, it's not safe
  sudo apt-get install ${DEBIAN_DEPS}
}

function init_run() {
  flavor="${1:$FLAVOR}"
  if [[ "$flavor" == "" ]]; then
	echo "Error: no flavor set"
	return 1
  fi
  
  ## Check if repo is already initialized and refuse work if so
  if [[ -f .lineageBuild ]]; then
          echo "ERROR: This directory appears to be initialized already"
          echo "Remove the file .lineageBuild if you want to force a init"
          echo "Process cancelled."
          return 1
  fi

  CUR_DIR="$PWD"
  mkdir -p "$SYS_DIR"
  cd "$SYS_DIR"
  echo "Initializing ... "
  repo init -u https://github.com/LineageOS/android.git -b ${FLAVOUR}
  status=$?
  if [ $status -ne 0 ]; then
          echo "Repo init failed."
          return 1
  fi
  echo "First synchronisation ... "
  repo sync $JJ 1>/dev/null 2>/dev/null
  status=$?
  if [ $status -ne 0 ]; then
          echo "repo sync failed"
          return 2
  fi
  echo "Repository initialized"
  cd "$CUR_DIR"
  touch .lineageBuild
}

OPTS=`getopt -o h --long init,dependencies,old-dependencies,inst-dep,no-sync -n 'build' -- "$@"`

if [ ${?} != 0 ]; then usage; exit 1; fi
eval set -- "${OPTS}"

while true; do
  case "${1}" in
    -h | --help) usage; exit 0; shift ;;
    --dependencies) print_deps ; exit 0; shift ;;
    --inst-dep) install_deps; exit ${?}; shift;;
    --init) init_run; exit ${?}; shift;;
    --no-sync) SYNC="0"; shift;;
    --) shift; break;;
    *) break;;
  esac
done

## Check program parameters
if [ ${#} -lt 1 ]; then
  usage
  exit 1
fi

checkFirstTime


LOGDIR="$PWD/logs"
TODAY="`date --iso`"
mkdir -p "$LOGDIR"
## Sync repositories
cd "$SYS_DIR"
if [ $? -ne 0 ]; then
	echo "Cannot change directory $SYS_DIR"
	exit 1	
fi
if [ "$SYNC" == 1 ]; then
	echo "Synching repositories ... "
	repo sync $JJ 1>/dev/null 2>/dev/null
	status=$?
	if [ $status -ne 0 ]; then
		echo "repo sync failed"
		exit 2
	fi
fi

# Setup build environment
source build/envsetup.sh

# Setup CCache
export USE_CCACHE=1
export CCACHE_COMPRESS=1

# Setup android JACK"
export ANDROID_JACK_VM_ARGS="-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4G"

# Iterate over devices
for var in "$@"
do
	echo "Building for device $var ... "
	echo "  Breakfast ... "
	OUT="${LOGDIR}/breakfast-${TODAY}.out"
	ERR="${LOGDIR}/breakfast-${TODAY}.err"
	time breakfast "$var" 1>"$OUT" 2>"$ERR"
	status=$?
	if [ $status -ne 0 ]; then
		echo "Breakfast failed for device $var"
		echo "Check log files $OUT and $ERR for details"
		exit 3
	fi
	croot
	if [ $? -ne 0 ]; then
		echo "Croot failed for device $var"
		echo "Check log files $OUT and $ERR for details"
		exit 4
	fi
	echo "  Brunch $var - (This is gonna take some time) ... "
	OUT="${LOGDIR}/brunch-${TODAY}.out"
	ERR="${LOGDIR}/brunch-${TODAY}.err"
	time brunch "$var" 1>"$OUT" 2>"$ERR"
	status=$?
	if [ $status -ne 0 ]; then
		echo "Brunch failed for device $var"
		echo "Check log files $OUT and $ERR for details"
		exit 5
	fi
        echo "Completed build for $var"
done

